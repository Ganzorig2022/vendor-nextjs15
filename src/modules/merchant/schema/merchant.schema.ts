import { validation } from "@/lib/validations";
import { z } from "zod";

/* üè¢ –ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω (Company Merchant) Schema */
export const companyMerchantSchema = z.object({
	owner_first_name: z
		.string()
		.describe("–ó–∞—Ö–∏—Ä–∞–ª—ã–Ω –Ω—ç—Ä")
		.min(1, "–ó–∞—Ö–∏—Ä–∞–ª—ã–Ω –Ω—ç—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.namePattern),

	owner_last_name: z
		.string()
		.describe("–ó–∞—Ö–∏—Ä–∞–ª—ã–Ω –æ–≤–æ–≥")
		.min(1, "–ó–∞—Ö–∏—Ä–∞–ª—ã–Ω –æ–≤–æ–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.namePattern),

	owner_register_no: z
		.string()
		.describe("–ó–∞—Ö–∏—Ä–∞–ª—ã–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä")
		.min(1, "–†–µ–≥–∏—Å—Ç—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.register),

	register_number: z
		.string()
		.describe("–ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä")
		.min(1, "–ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω —Ä–µ–≥–∏—Å—Ç—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.number),

	company_name: z
		.string()
		.describe("–ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω –Ω—ç—Ä")
		.min(1, "–ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω –Ω—ç—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(100, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.namePattern),

	name: z
		.string()
		.describe("–ú–µ—Ä—á–∞–Ω—Ç—ã–Ω –Ω—ç—Ä")
		.min(1, "–ú–µ—Ä—á–∞–Ω—Ç—ã–Ω –Ω—ç—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.namePattern),
	name_eng: z
		.string()
		.describe("–ú–µ—Ä—á–∞–Ω—Ç—ã–Ω –Ω—ç—Ä (–ê–Ω–≥–ª–∏)")
		.min(1, "–ê–Ω–≥–ª–∏ –Ω—ç—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.namePattern),

	mcc_code: z
		.string()
		.describe("MCC –∫–æ–¥")
		.min(1, "MCC –∫–æ–¥ –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞"),

	city: z
		.string()
		.describe("–•–æ—Ç")
		.min(1, "–•–æ—Ç –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞"),

	district: z
		.string()
		.describe("–î“Ø“Ø—Ä—ç–≥")
		.min(1, "–î“Ø“Ø—Ä—ç–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞"),

	address: z
		.string()
		.describe("–•–∞—è–≥")
		.min(1, "–•–∞—è–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞"),

	phone: z
		.string()
		.describe("–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä")
		.min(1, "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.number),

	email: z.email("–ó”©–≤ –∏–º—ç–π–ª –æ—Ä—É—É–ª–Ω–∞ —É—É").max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞"),

	// location_lat: z.string().describe("”®—Ä–≥”©—Ä”©–≥").optional().nullable(),
	// location_lng: z.string().describe("–£—Ä—Ç—Ä–∞–≥").optional().nullable(),

	max_qr_account_count: z
		.string()
		.describe("–î—ç—ç–¥ QR –¥–∞–Ω—Å–Ω—ã —Ç–æ–æ")
		.min(1, "QR –¥–∞–Ω—Å–Ω—ã —Ç–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.number),
});

/* üë§ –•—É–≤—å —Ö“Ø–Ω (Person Merchant) Schema */
export const personMerchantSchema = z.object({
	first_name: z
		.string()
		.describe("–ù—ç—Ä")
		.min(1, "–ù—ç—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.namePattern),

	last_name: z
		.string()
		.describe("–û–≤–æ–≥")
		.min(1, "–û–≤–æ–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.namePattern),

	register_number: z
		.string()
		.describe("–†–µ–≥–∏—Å—Ç—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä")
		.min(1, "–†–µ–≥–∏—Å—Ç—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.register),
	business_name: z
		.string()
		.describe("–ë–∏–∑–Ω–µ—Å–∏–π–Ω –Ω—ç—Ä")
		.min(1, "–ë–∏–∑–Ω–µ—Å–∏–π–Ω –Ω—ç—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.namePattern),

	business_name_eng: z
		.string()
		.describe("–ë–∏–∑–Ω–µ—Å–∏–π–Ω –Ω—ç—Ä (–ê–Ω–≥–ª–∏)")
		.min(1, "–ê–Ω–≥–ª–∏ –Ω—ç—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.namePattern),

	mcc_code: z
		.string()
		.describe("MCC –∫–æ–¥")
		.min(1, "MCC –∫–æ–¥ –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞"),

	city: z
		.string()
		.describe("–•–æ—Ç")
		.min(1, "–•–æ—Ç –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞"),

	district: z
		.string()
		.describe("–î“Ø“Ø—Ä—ç–≥")
		.min(1, "–î“Ø“Ø—Ä—ç–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞"),

	address: z
		.string()
		.describe("–•–∞—è–≥")
		.min(1, "–•–∞—è–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞"),

	phone: z
		.string()
		.describe("–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä")
		.min(1, "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É")
		.max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞")
		.regex(validation.number),

	email: z.email("–ó”©–≤ –∏–º—ç–π–ª –æ—Ä—É—É–ª–Ω–∞ —É—É").max(255, "–•—ç—Ç —É—Ä—Ç –±–∞–π–Ω–∞"),
});

export type PersonMerchantFormType = z.infer<typeof personMerchantSchema>;
export type CompanyMerchantFormType = z.infer<typeof companyMerchantSchema>;

export const merchantFormDefaults = {
	owner_first_name: "",
	owner_last_name: "",
	owner_register_no: "",
	register_number: "",
	company_name: "",
	name: "",
	name_eng: "",
	mcc_code: "",
	city: "",
	district: "",
	address: "",
	phone: "",
	email: "",
	location_lat: "",
	location_lng: "",
	max_qr_account_count: "",
};

export type MerchantType = "ORGANIZATION" | "PERSON";

export const PERSON_FIELD_LABELS: Record<string, string> = {
	first_name: "–ù—ç—Ä",
	last_name: "–û–≤–æ–≥",
	register_number: "–†–µ–≥–∏—Å—Ç—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä",
	business_name: "–ë–∏–∑–Ω–µ—Å–∏–π–Ω –Ω—ç—Ä",
	business_name_eng: "–ë–∏–∑–Ω–µ—Å–∏–π–Ω –Ω—ç—Ä (–ê–Ω–≥–ª–∏)",
	mcc_code: "MCC –∫–æ–¥",
	city: "–•–æ—Ç",
	district: "–î“Ø“Ø—Ä—ç–≥",
	address: "–•–∞—è–≥",
	phone: "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä",
	email: "–¶–∞—Ö–∏–º —à—É—É–¥–∞–Ω",
};

export const ORGANIZATION_FIELD_LABELS: Record<string, string> = {
	owner_first_name: "–ó–∞—Ö–∏—Ä–∞–ª—ã–Ω –Ω—ç—Ä",
	owner_last_name: "–ó–∞—Ö–∏—Ä–∞–ª—ã–Ω –æ–≤–æ–≥",
	owner_register_no: "–ó–∞—Ö–∏—Ä–∞–ª—ã–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä",
	register_number: "–ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä",
	company_name: "–ö–æ–º–ø–∞–Ω–∏–π–Ω –Ω—ç—Ä",
	name: "–ë–∏–∑–Ω–µ—Å–∏–π–Ω –Ω—ç—Ä",
	name_eng: "–ë–∏–∑–Ω–µ—Å–∏–π–Ω –Ω—ç—Ä (–ê–Ω–≥–ª–∏)",
	mcc_code: "MCC –∫–æ–¥",
	city: "–•–æ—Ç",
	district: "–î“Ø“Ø—Ä—ç–≥",
	address: "–•–∞—è–≥",
	phone: "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä",
	email: "–¶–∞—Ö–∏–º —à—É—É–¥–∞–Ω",
	location_lat: "–ë–∞–π—Ä—à–ª—ã–Ω ”©—Ä–≥”©—Ä”©–≥",
	location_lng: "–ë–∞–π—Ä—à–ª—ã–Ω —É—Ä—Ç—Ä–∞–≥",
	max_qr_account_count: "QR –¥–∞–Ω—Å–Ω—ã —Ç–æ–æ",
};
